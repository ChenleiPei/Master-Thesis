from scipy.stats import norm
import numpy as np

import numpy as np
from scipy.stats import norm
import sympy as sp


def calculate_log_likelihood_from_gaussian(points_file, target_func, noise=0.01):
    """
    Calculate the log-likelihood that the given data points were generated by the target function.

    Parameters:
    - points_file (str): The filename of the saved points.
    - target_func (function or sympy expression): The target function providing the mean values.
    - noise (float): Standard deviation of Gaussian noise.

    Returns:
    - log_likelihood (float): The log-likelihood of the dataset under the target function model.
    """
    # Load the saved points
    data = np.load(points_file)
    x, y_observed = data[:, 0], data[:, 1]

    # If target_func is a sympy expression, convert it to a callable function
    if isinstance(target_func, sp.Basic):  # Check if it's a sympy expression
        # Convert the sympy expression into a lambda function using lambdify
        target_func = sp.lambdify('x', target_func, 'numpy')

    # Calculate the mean values based on the target function
    y_mean = target_func(x).reshape(-1)

    # Calculate the log likelihood of each point using Gaussian distribution
    log_likelihoods = norm.logpdf(y_observed, loc=y_mean, scale=noise)
    joint_log_likelihood = np.sum(log_likelihoods)  # Sum of log-likelihoods

    return joint_log_likelihood


# Example usage:
if __name__ == "__main__":
    # Define the target function as a Python function
    def target_function(x):
        return np.sin(x).reshape(-1)  # Example: sin(x)


    # Calculate the log-likelihood of the data generated by the target function
    filename = "datapoints.npy"
    log_likelihood = calculate_log_likelihood_from_gaussian(filename, target_function, noise=0.1)
    print("Log-Likelihood of the data generated by the target function:", log_likelihood)
